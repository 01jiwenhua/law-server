<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.shx.law.mapper.DistanceMapper">
  <resultMap id="BaseResultMap" type="com.shx.law.entity.Distance">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="device_in_id" jdbcType="INTEGER" property="deviceInId" />
    <result column="structure_out_id" jdbcType="INTEGER" property="structureOutId" />
    <result column="distance" jdbcType="VARCHAR" property="distance" />
    <result column="instruction" jdbcType="VARCHAR" property="instruction" />
    <result column="standard" jdbcType="VARCHAR" property="standard" />
    <result column="table_no" jdbcType="VARCHAR" property="tableNo" />
    <result column="note_id" jdbcType="INTEGER" property="noteId" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, device_in_id, structure_out_id, distance, instruction, standard, table_no, note_id
  </sql>
  <select id="selectByExample" parameterType="com.shx.law.entity.DistanceExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from t_distance
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from t_distance
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from t_distance
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.shx.law.entity.DistanceExample">
    delete from t_distance
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.shx.law.entity.Distance">
    insert into t_distance (id, device_in_id, structure_out_id, 
      distance, instruction, standard, 
      table_no, note_id)
    values (#{id,jdbcType=INTEGER}, #{deviceInId,jdbcType=INTEGER}, #{structureOutId,jdbcType=INTEGER}, 
      #{distance,jdbcType=VARCHAR}, #{instruction,jdbcType=VARCHAR}, #{standard,jdbcType=VARCHAR}, 
      #{tableNo,jdbcType=VARCHAR}, #{noteId,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.shx.law.entity.Distance">
    insert into t_distance
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="deviceInId != null">
        device_in_id,
      </if>
      <if test="structureOutId != null">
        structure_out_id,
      </if>
      <if test="distance != null">
        distance,
      </if>
      <if test="instruction != null">
        instruction,
      </if>
      <if test="standard != null">
        standard,
      </if>
      <if test="tableNo != null">
        table_no,
      </if>
      <if test="noteId != null">
        note_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="deviceInId != null">
        #{deviceInId,jdbcType=INTEGER},
      </if>
      <if test="structureOutId != null">
        #{structureOutId,jdbcType=INTEGER},
      </if>
      <if test="distance != null">
        #{distance,jdbcType=VARCHAR},
      </if>
      <if test="instruction != null">
        #{instruction,jdbcType=VARCHAR},
      </if>
      <if test="standard != null">
        #{standard,jdbcType=VARCHAR},
      </if>
      <if test="tableNo != null">
        #{tableNo,jdbcType=VARCHAR},
      </if>
      <if test="noteId != null">
        #{noteId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.shx.law.entity.DistanceExample" resultType="java.lang.Long">
    select count(*) from t_distance
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update t_distance
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.deviceInId != null">
        device_in_id = #{record.deviceInId,jdbcType=INTEGER},
      </if>
      <if test="record.structureOutId != null">
        structure_out_id = #{record.structureOutId,jdbcType=INTEGER},
      </if>
      <if test="record.distance != null">
        distance = #{record.distance,jdbcType=VARCHAR},
      </if>
      <if test="record.instruction != null">
        instruction = #{record.instruction,jdbcType=VARCHAR},
      </if>
      <if test="record.standard != null">
        standard = #{record.standard,jdbcType=VARCHAR},
      </if>
      <if test="record.tableNo != null">
        table_no = #{record.tableNo,jdbcType=VARCHAR},
      </if>
      <if test="record.noteId != null">
        note_id = #{record.noteId,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update t_distance
    set id = #{record.id,jdbcType=INTEGER},
      device_in_id = #{record.deviceInId,jdbcType=INTEGER},
      structure_out_id = #{record.structureOutId,jdbcType=INTEGER},
      distance = #{record.distance,jdbcType=VARCHAR},
      instruction = #{record.instruction,jdbcType=VARCHAR},
      standard = #{record.standard,jdbcType=VARCHAR},
      table_no = #{record.tableNo,jdbcType=VARCHAR},
      note_id = #{record.noteId,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.shx.law.entity.Distance">
    update t_distance
    <set>
      <if test="deviceInId != null">
        device_in_id = #{deviceInId,jdbcType=INTEGER},
      </if>
      <if test="structureOutId != null">
        structure_out_id = #{structureOutId,jdbcType=INTEGER},
      </if>
      <if test="distance != null">
        distance = #{distance,jdbcType=VARCHAR},
      </if>
      <if test="instruction != null">
        instruction = #{instruction,jdbcType=VARCHAR},
      </if>
      <if test="standard != null">
        standard = #{standard,jdbcType=VARCHAR},
      </if>
      <if test="tableNo != null">
        table_no = #{tableNo,jdbcType=VARCHAR},
      </if>
      <if test="noteId != null">
        note_id = #{noteId,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.shx.law.entity.Distance">
    update t_distance
    set device_in_id = #{deviceInId,jdbcType=INTEGER},
      structure_out_id = #{structureOutId,jdbcType=INTEGER},
      distance = #{distance,jdbcType=VARCHAR},
      instruction = #{instruction,jdbcType=VARCHAR},
      standard = #{standard,jdbcType=VARCHAR},
      table_no = #{tableNo,jdbcType=VARCHAR},
      note_id = #{noteId,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>


  <!--模糊查询列表-->
  <select id="selectDistanceByFuzzy" resultType="map">
    SELECT
        s1.type
    FROM
        t_distance d
    JOIN t_structure s1 ON d.device_in_id = s1.id
    JOIN t_structure s2 ON d.structure_out_id = s2.id
     <if test="deviceInName != null">
    AND s1.structure_name LIKE "%"#{deviceInName}"%"
     </if>
     <if test="structureOutName != null">
    AND s2.structure_name LIKE "%"#{structureOutName}"%"
     </if>
    GROUP BY
        s1.type
  </select>

  <!--模糊查询详情-->
  <select id="selectDistanceByType" resultType="map">
    SELECT
        s1.structure_name,
        s2.structure_name,
        d.*
    FROM
        t_distance d
    JOIN t_structure s1 ON d.device_in_id = s1.id
    JOIN t_structure s2 ON d.structure_out_id = s2.id
      <if test="deviceInName != null">
    AND s1.structure_name LIKE "%"#{deviceInName}"%"
      </if>
      <if test="structureOutName != null">
    AND s2.structure_name LIKE "%"#{structureOutName}"%"
      </if>
    AND s1.type = #{type}
  </select>
  <!--距离查询-->
  <select id="selectDistance" resultType="java.util.Map">
    SELECT
    d.id,
    d.device_in_id deviceInId,
    d.structure_out_id structureOutId,
    d.distance,
    d.instruction,
    d.standard,
    d.table_no tableNo,
    n.id noteId,
    n.content noteContent
    FROM
    t_distance d
    JOIN t_architecture a1 ON d.device_in_id = a1.id
    JOIN t_architecture a2 ON d.structure_out_id = a2.id
    JOIN t_note n ON n.id = d.note_id
    WHERE device_in_id=#{deviceInId} AND structure_out_id=#{structureOutId}
  </select>
</mapper>